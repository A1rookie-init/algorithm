# -*- coding: utf-8 -*-
"""BOJ_2667.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ROw6WW9PfrwuEEzQJ7WEtpImzIgu9ks_
"""

def dfs(a, b, visited, h_cnt, map_size):
  matrix[a][b] = 0
  # print(f'-({a},{b})', end='') # 코드짤떄 확인위해
  h_cnt += 1
  if a > 0 and matrix[a-1][b] == 1:
    h_cnt = dfs(a-1, b, visited, h_cnt, map_size)
  if b < map_size-1 and matrix[a][b+1] == 1:
    h_cnt = dfs(a, b+1, visited, h_cnt, map_size)
  if a < map_size-1 and matrix[a+1][b] == 1:
    h_cnt = dfs(a+1, b, visited, h_cnt, map_size)
  if b > 0 and matrix[a][b-1] == 1:
    h_cnt = dfs(a, b-1, visited, h_cnt, map_size)
  return h_cnt

if __name__ == '__main__':
  N = int(input())
  matrix = [list(map(int, input().strip())) for _ in range(N)]

  h_cnt = 0  # 집house의 개수

  h_cnt_list = []
  for r in range(N):
    for f in range(N):
      if matrix[r][f] == 1:
        # 해당 단지 내의 집 개수
        this_h_cnt = dfs(r, f, matrix, h_cnt, N) # h_cnt 대신 0을 집어넣어도 됨.
        h_cnt_list.append(this_h_cnt)

  h_cnt_list.sort()
  print(len(h_cnt_list))
  for i in h_cnt_list:
    print(i)